//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package tk.woppo.sunday.ui;

import java.util.List;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import tk.woppo.sunday.R.layout;
import tk.woppo.sunday.model.city.BaseCityModel;
import tk.woppo.sunday.ui.adapter.CityAdapter_;
import tk.woppo.sunday.widget.jazzylistview.JazzyListView;

public final class CityActivity_
    extends CityActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_city);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mAdapterTown = CityAdapter_.getInstance_(this);
        mAdapterProvicne = CityAdapter_.getInstance_(this);
        mAdapterCity = CityAdapter_.getInstance_(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static CityActivity_.IntentBuilder_ intent(Context context) {
        return new CityActivity_.IntentBuilder_(context);
    }

    public static CityActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new CityActivity_.IntentBuilder_(fragment);
    }

    public static CityActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new CityActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        mLvCity = ((JazzyListView) hasViews.findViewById(tk.woppo.sunday.R.id.lv_area2));
        mllSelectCity = ((RelativeLayout) hasViews.findViewById(tk.woppo.sunday.R.id.rl_city));
        mLLCityContent = ((LinearLayout) hasViews.findViewById(tk.woppo.sunday.R.id.ll_city_content));
        mLvTown = ((JazzyListView) hasViews.findViewById(tk.woppo.sunday.R.id.lv_area3));
        tvArea1 = ((TextView) hasViews.findViewById(tk.woppo.sunday.R.id.tv_area1));
        mLvProvicne = ((JazzyListView) hasViews.findViewById(tk.woppo.sunday.R.id.lv_area1));
        tvArea2 = ((TextView) hasViews.findViewById(tk.woppo.sunday.R.id.tv_area2));
        tvArea3 = ((TextView) hasViews.findViewById(tk.woppo.sunday.R.id.tv_area3));
        {
            AdapterView<?> view = ((AdapterView<?> ) hasViews.findViewById(tk.woppo.sunday.R.id.lv_area3));
            if (view!= null) {
                view.setOnItemClickListener(new OnItemClickListener() {


                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        CityActivity_.this.areaItemClick(((BaseCityModel) parent.getAdapter().getItem(position)));
                    }

                }
                );
            }
        }
        {
            AdapterView<?> view = ((AdapterView<?> ) hasViews.findViewById(tk.woppo.sunday.R.id.lv_area1));
            if (view!= null) {
                view.setOnItemClickListener(new OnItemClickListener() {


                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        CityActivity_.this.provicneItemClick(((BaseCityModel) parent.getAdapter().getItem(position)));
                    }

                }
                );
            }
        }
        {
            AdapterView<?> view = ((AdapterView<?> ) hasViews.findViewById(tk.woppo.sunday.R.id.lv_area2));
            if (view!= null) {
                view.setOnItemClickListener(new OnItemClickListener() {


                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        CityActivity_.this.cityItemClick(((BaseCityModel) parent.getAdapter().getItem(position)));
                    }

                }
                );
            }
        }
        initActivity();
    }

    @Override
    public void updateList(final int type, final List<BaseCityModel> models) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CityActivity_.super.updateList(type, models);
            }

        }
        );
    }

    @Override
    public void getProvicneList() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CityActivity_.super.getProvicneList();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void getAreaList(final String id) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CityActivity_.super.getAreaList(id);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void getCityList(final String id) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CityActivity_.super.getCityList(id);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, CityActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, CityActivity_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, CityActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public CityActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

    }

}
